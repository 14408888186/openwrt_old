diff -ruN a/drivers/usb/host/Kconfig b/drivers/usb/host/Kconfig
--- a/drivers/usb/host/Kconfig	2014-07-16 16:06:25.353735000 +0800
+++ b/drivers/usb/host/Kconfig	2014-07-16 16:22:32.202266541 +0800
@@ -371,6 +371,11 @@
 
 if USB_OHCI_HCD
 
+config RT3XXX_OHCI
+	bool "Ralink OHCI HCD support"
+	depends on USB_OHCI_HCD
+	default y
+
 config USB_OHCI_HCD_OMAP1
 	bool "OHCI support for OMAP1/2 chips"
 	depends on ARCH_OMAP1
diff -ruN a/drivers/usb/host/ohci-hcd.c b/drivers/usb/host/ohci-hcd.c
--- a/drivers/usb/host/ohci-hcd.c	2014-06-17 04:43:06.000000000 +0800
+++ b/drivers/usb/host/ohci-hcd.c	2014-07-16 16:22:32.204266552 +0800
@@ -1191,6 +1191,11 @@
 #define PLATFORM_DRIVER		ohci_hcd_tilegx_driver
 #endif
 
+#if defined (CONFIG_RT3XXX_OHCI) || defined (CONFIG_RT3XXX_OHCI_MODULE)
+#include "ohci-rt3xxx.c"
+#define RT3XXX_PLATFORM_DRIVER     ohci_hcd_rt3xxx_driver
+#endif
+
 #ifdef CONFIG_USB_OHCI_HCD_PLATFORM
 #include "ohci-platform.c"
 #define PLATFORM_DRIVER		ohci_platform_driver
@@ -1208,6 +1213,7 @@
 	!defined(S3C2410_PLATFORM_DRIVER) && \
 	!defined(EXYNOS_PLATFORM_DRIVER) && \
 	!defined(EP93XX_PLATFORM_DRIVER) && \
+	!defined(RT3XXX_PLATFORM_DRIVER) && \
 	!defined(AT91_PLATFORM_DRIVER) && \
 	!defined(NXP_PLATFORM_DRIVER) && \
 	!defined(DAVINCI_PLATFORM_DRIVER) && \
@@ -1301,6 +1307,12 @@
 		goto error_exynos;
 #endif
 
+#ifdef RT3XXX_PLATFORM_DRIVER
+	retval = platform_driver_register(&RT3XXX_PLATFORM_DRIVER);
+	if (retval < 0)
+		goto error_rt3xxx;
+#endif
+
 #ifdef EP93XX_PLATFORM_DRIVER
 	retval = platform_driver_register(&EP93XX_PLATFORM_DRIVER);
 	if (retval < 0)
@@ -1350,6 +1362,10 @@
 	platform_driver_unregister(&AT91_PLATFORM_DRIVER);
  error_at91:
 #endif
+#ifdef RT3XXX_PLATFORM_DRIVER
+	platform_driver_unregister(&RT3XXX_PLATFORM_DRIVER);
+ error_rt3xxx:
+#endif
 #ifdef EP93XX_PLATFORM_DRIVER
 	platform_driver_unregister(&EP93XX_PLATFORM_DRIVER);
  error_ep93xx:
@@ -1426,6 +1442,9 @@
 #ifdef EP93XX_PLATFORM_DRIVER
 	platform_driver_unregister(&EP93XX_PLATFORM_DRIVER);
 #endif
+#ifdef RT3XXX_PLATFORM_DRIVER
+	platform_driver_unregister(&RT3XXX_PLATFORM_DRIVER);
+#endif
 #ifdef EXYNOS_PLATFORM_DRIVER
 	platform_driver_unregister(&EXYNOS_PLATFORM_DRIVER);
 #endif
diff -ruN a/drivers/usb/host/ohci-platform.c b/drivers/usb/host/ohci-platform.c
--- a/drivers/usb/host/ohci-platform.c	2014-07-16 16:06:24.374730000 +0800
+++ b/drivers/usb/host/ohci-platform.c	2014-07-16 16:22:32.205266558 +0800
@@ -222,10 +222,10 @@
 #define ohci_platform_resume	NULL
 #endif /* CONFIG_PM */
 
-static const struct of_device_id ralink_ohci_ids[] = {
-	{ .compatible = "ralink,rt3xxx-ohci", },
-	{}
-};
+//static const struct of_device_id ralink_ohci_ids[] = {
+//	{ .compatible = "ralink,rt3xxx-ohci", },
+//	{}
+//};
 
 static const struct platform_device_id ohci_platform_table[] = {
 	{ "ohci-platform", 0 },
@@ -247,6 +247,6 @@
 		.owner	= THIS_MODULE,
 		.name	= "ohci-platform",
 		.pm	= &ohci_platform_pm_ops,
-		.of_match_table = of_match_ptr(ralink_ohci_ids),
+//		.of_match_table = of_match_ptr(ralink_ohci_ids),
 	}
 };
diff -ruN a/drivers/usb/host/ohci-rt3xxx.c b/drivers/usb/host/ohci-rt3xxx.c
--- a/drivers/usb/host/ohci-rt3xxx.c	1970-01-01 08:00:00.000000000 +0800
+++ b/drivers/usb/host/ohci-rt3xxx.c	2014-07-16 15:28:05.081089000 +0800
@@ -0,0 +1,217 @@
+/*
+ * RT3883 OHCI HCD (Host Controller Driver) for USB.
+ *
+ * (C) Copyright 2009 Ralink Tech Company
+ *
+ * Bus Glue for Ralink OHCI controller.
+ *
+ * Written by YYHuang <yy_huang@ralinktech.com.tw>
+ * Based on fragments of previous driver by Russell King et al.
+ *
+ * This file is licenced under the GPL.
+ */
+
+#include <linux/clk.h>
+#include <linux/device.h>
+#include <linux/signal.h>
+#include <linux/platform_device.h>
+#include <linux/usb/ohci_pdriver.h>
+#include <linux/dma-mapping.h>
+#include <linux/of.h>
+
+#include "ralink_usb.h"
+
+static struct usb_ohci_pdata ohci_rt3xxx_defaults;
+
+static int usb_hcd_rt3xxx_probe(const struct hc_driver *driver, struct platform_device *pdev)
+{
+	int retval;
+	struct usb_hcd *hcd;
+	struct resource *res_mem;
+	struct usb_ohci_pdata *pdata;
+	int irq;
+//	int err = -ENOMEM;
+
+	/*
+	 * use reasonable defaults so platforms don't have to provide these.
+	 * with DT probing on ARM, none of these are set.
+	 */
+	if (!pdev->dev.platform_data)
+		pdev->dev.platform_data = &ohci_rt3xxx_defaults;
+	if (!pdev->dev.dma_mask)
+		pdev->dev.dma_mask = &pdev->dev.coherent_dma_mask;
+	if (!pdev->dev.coherent_dma_mask)
+		pdev->dev.coherent_dma_mask = DMA_BIT_MASK(32);
+
+	pdata = pdev->dev.platform_data;
+
+	irq = platform_get_irq(pdev, 0);
+	if (irq < 0) {
+		dev_err(&pdev->dev, "no irq provided");
+		return irq;
+	}
+
+	res_mem = platform_get_resource(pdev, IORESOURCE_MEM, 0);
+	if (!res_mem) {
+		dev_err(&pdev->dev, "no memory resource provided");
+		return -ENXIO;
+	}
+
+//	if (pdata->power_on) {
+//		err = pdata->power_on(dev);
+//		if (err < 0)
+//			return err;
+//	}
+
+	if (pdev->resource[1].flags != IORESOURCE_IRQ) {
+		dev_dbg(&pdev->dev, "resource[1] is not IORESOURCE_IRQ\n");
+		return -ENOMEM;
+	}
+
+	hcd = usb_create_hcd(driver, &pdev->dev, "rt3xxx-ohci");
+	if (hcd == NULL)
+		return -ENOMEM;
+
+	hcd->rsrc_start = pdev->resource[0].start;
+	hcd->rsrc_len = pdev->resource[0].end - pdev->resource[0].start + 1;
+	if (!request_mem_region(hcd->rsrc_start, hcd->rsrc_len, hcd_name)) {
+		usb_put_hcd(hcd);
+		retval = -EBUSY;
+		goto err1;
+	}
+
+	hcd->regs = ioremap(hcd->rsrc_start, hcd->rsrc_len);
+	if (hcd->regs == NULL) {
+		dev_dbg(&pdev->dev, "ioremap failed\n");
+		retval = -ENOMEM;
+		goto err2;
+	}
+
+	try_wake_up();
+
+	ohci_hcd_init(hcd_to_ohci(hcd));
+
+	retval = usb_add_hcd(hcd, pdev->resource[1].start, IRQF_DISABLED | IRQF_SHARED);
+	if (retval == 0)
+		return retval;
+
+	try_sleep();
+	iounmap(hcd->regs);
+err2:
+	release_mem_region(hcd->rsrc_start, hcd->rsrc_len);
+err1:
+	usb_put_hcd(hcd);
+
+	return retval;
+}
+
+static int usb_hcd_rt3xxx_remove(struct usb_hcd *hcd, struct platform_device *pdev)
+{
+	struct usb_ohci_pdata *pdata = pdev->dev.platform_data;
+
+	usb_remove_hcd(hcd);
+	try_sleep();
+	iounmap(hcd->regs);
+	release_mem_region(hcd->rsrc_start, hcd->rsrc_len);
+	usb_put_hcd(hcd);
+	platform_set_drvdata(pdev, NULL);
+
+//	if (pdata->power_off)
+//		pdata->power_off(pdev);
+
+	if (pdata == &ohci_rt3xxx_defaults)
+		pdev->dev.platform_data = NULL;
+
+	return 0;
+}
+
+static int ohci_rt3xxx_start(struct usb_hcd *hcd)
+{
+	struct ohci_hcd *ohci = hcd_to_ohci(hcd);
+	int ret;
+
+	if ((ret = ohci_init(ohci)) < 0)
+		return ret;
+
+	if ((ret = ohci_run(ohci)) < 0) {
+		dev_err(hcd->self.controller, "can't start %s\n",
+			hcd->self.bus_name);
+		ohci_stop(hcd);
+		return ret;
+	}
+
+	return 0;
+}
+
+static struct hc_driver ohci_rt3xxx_hc_driver = {
+	.description		= hcd_name,
+	.product_desc		= "RT3xxx OHCI Controller",
+	.hcd_priv_size		= sizeof(struct ohci_hcd),
+	.irq			= ohci_irq,
+	.flags			= HCD_USB11 | HCD_MEMORY,
+	.start			= ohci_rt3xxx_start,
+	.stop			= ohci_stop,
+	.shutdown		= ohci_shutdown,
+	.urb_enqueue		= ohci_urb_enqueue,
+	.urb_dequeue		= ohci_urb_dequeue,
+	.endpoint_disable	= ohci_endpoint_disable,
+	.get_frame_number	= ohci_get_frame,
+	.hub_status_data	= ohci_hub_status_data,
+	.hub_control		= ohci_hub_control,
+#ifdef CONFIG_PM
+	.bus_suspend		= ohci_bus_suspend,
+	.bus_resume		= ohci_bus_resume,
+#endif
+	.start_port_reset	= ohci_start_port_reset,
+};
+
+extern int usb_disabled(void);
+
+
+static int ohci_hcd_rt3xxx_drv_probe(struct platform_device *pdev)
+{
+	int ret;
+
+	ret = -ENODEV;
+
+	if (!usb_disabled())
+		ret = usb_hcd_rt3xxx_probe(&ohci_rt3xxx_hc_driver, pdev);
+
+	return ret;
+}
+
+static int ohci_hcd_rt3xxx_drv_remove(struct platform_device *pdev)
+{
+	struct usb_hcd *hcd = platform_get_drvdata(pdev);
+
+	return usb_hcd_rt3xxx_remove(hcd, pdev);
+
+//	if(!usb_find_device(0x0, 0x0)) // No any other USB host controller.
+//		try_sleep();
+
+//	return 0;
+}
+
+static const struct of_device_id ralink_ohci_ids[] = {
+	{ .compatible = "ralink,rt3xxx-ohci", },
+	{}
+};
+
+//static const struct platform_device_id ohci_rt3xxx_table[] = {
+//	{ "ohci-rt3xxx", 0 },
+//	{ }
+//};
+MODULE_DEVICE_TABLE(of, ralink_ohci_ids);
+
+static struct platform_driver ohci_hcd_rt3xxx_driver = {
+	.probe		= ohci_hcd_rt3xxx_drv_probe,
+	.remove		= ohci_hcd_rt3xxx_drv_remove,
+	.shutdown	= usb_hcd_platform_shutdown,
+	.driver		= {
+		.name	= "rt3xxx-ohci",
+		.owner	= THIS_MODULE,
+		.of_match_table = of_match_ptr(ralink_ohci_ids),
+	},
+};
+
+MODULE_ALIAS("platform:rt3xxx-ohci");
diff -ruN a/drivers/usb/host/ralink_usb.h b/drivers/usb/host/ralink_usb.h
--- a/drivers/usb/host/ralink_usb.h	1970-01-01 08:00:00.000000000 +0800
+++ b/drivers/usb/host/ralink_usb.h	2014-07-16 16:22:32.206266563 +0800
@@ -0,0 +1,60 @@
+
+
+#ifndef __RALINK_USB_H__
+
+#include <asm/rt2880/rt_mmap.h>
+
+#define SYSCFG1			(RALINK_SYSCTL_BASE + 0x14)
+#define USB0_HOST_MODE		(1UL<<10)
+
+#define RT2880_CLKCFG1_REG      (RALINK_SYSCTL_BASE + 0x30)
+
+#define RT2880_RSTCTRL_REG      (RALINK_SYSCTL_BASE + 0x34)
+#define RALINK_UHST_RST         (1<<22)
+#define RALINK_UDEV_RST         (1<<25)
+
+inline static void try_wake_up(void)
+{
+	u32 val;
+
+	val = le32_to_cpu(*(volatile u_long *)(RT2880_CLKCFG1_REG));
+#if defined (CONFIG_SOC_RT3883) || defined (CONFIG_SOC_RT3352) || defined (CONFIG_SOC_MT7620)
+	val = val | (RALINK_UPHY0_CLK_EN | RALINK_UPHY1_CLK_EN) ;
+#elif defined (CONFIG_SOC_RT5350)
+	/* one port only */
+	val = val | (RALINK_UPHY0_CLK_EN) ;
+#else
+#error	"no define platform"
+#endif
+
+	*(volatile u_long *)(RT2880_CLKCFG1_REG) = cpu_to_le32(val);
+	udelay(10000);	// enable port0 & port1 Phy clock
+
+	val = le32_to_cpu(*(volatile u_long *)(RT2880_RSTCTRL_REG));
+	val = val & ~(RALINK_UHST_RST | RALINK_UDEV_RST);
+	*(volatile u_long *)(RT2880_RSTCTRL_REG) = cpu_to_le32(val);
+	udelay(10000);	// toggle reset bit 25 & 22 to 0
+}
+
+inline static void try_sleep(void)
+{
+	u32 val;
+
+	val = le32_to_cpu(*(volatile u_long *)(RT2880_CLKCFG1_REG));
+#if defined (CONFIG_SOC_RT3883) || defined (CONFIG_SOC_RT3352) || defined (CONFIG_SOC_MT7620)
+	val = val & ~(RALINK_UPHY0_CLK_EN | RALINK_UPHY1_CLK_EN);
+#elif defined (CONFIG_SOC_RT5350)
+	val = val & ~(RALINK_UPHY0_CLK_EN);
+#else
+#error	"no define platform"
+#endif
+	*(volatile u_long *)(RT2880_CLKCFG1_REG) = cpu_to_le32(val);
+	udelay(10000);  // disable port0 & port1 Phy clock
+
+	val = le32_to_cpu(*(volatile u_long *)(RT2880_RSTCTRL_REG));
+	val = val | (RALINK_UHST_RST | RALINK_UDEV_RST);
+	*(volatile u_long *)(RT2880_RSTCTRL_REG) = cpu_to_le32(val);
+	udelay(10000);  // toggle reset bit 25 & 22 to 1
+}
+
+#endif /* __RALINK_USB_H__ */
diff -ruN a/drivers/usb/Kconfig b/drivers/usb/Kconfig
--- a/drivers/usb/Kconfig	2014-07-16 16:06:24.400730000 +0800
+++ b/drivers/usb/Kconfig	2014-07-16 16:22:32.211266591 +0800
@@ -25,6 +25,7 @@
 	# MIPS:
 	default y if MIPS_ALCHEMY
 	default y if MACH_JZ4740
+	default y if SOC_MT7620
 	# more:
 	default PCI
 
@@ -49,6 +50,7 @@
 	default y if ARCH_MMP
 	default y if MACH_LOONGSON1
 	default y if PLAT_ORION
+	default y if SOC_MT7620
 	default PCI
 
 # some non-PCI HCDs implement xHCI
